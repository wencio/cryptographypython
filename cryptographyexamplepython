from cryptography.hazmat.backends import default_backend
from cryptography.hazmat.primitives.asymmetric import ec
from cryptography.hazmat.primitives import serialization

# Genera un par de claves ECC
private_key = ec.generate_private_key(ec.SECP256K1(), default_backend())
public_key = private_key.public_key()

# Obtiene la clave pública en formato PEM (para compartir)
public_pem = public_key.public_bytes(
    encoding=serialization.Encoding.PEM,
    format=serialization.PublicFormat.SubjectPublicKeyInfo
)

# Firmar un mensaje
message = b"Este es un mensaje a firmar"
signature = private_key.sign(
    message,
    ec.ECDSA(hashes.SHA256())
)

# Verificar la firma
try:
    public_key.verify(
        signature,
        message,
        ec.ECDSA(hashes.SHA256())
    )
    print("La firma es válida y el mensaje no ha sido alterado.")
except Exception:
    print("La firma no es válida o el mensaje ha sido alterado.")
